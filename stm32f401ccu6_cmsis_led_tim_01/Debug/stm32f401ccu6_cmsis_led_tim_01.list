
stm32f401ccu6_cmsis_led_tim_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000550  08000550  00001558  2**0
                  CONTENTS
  4 .ARM          00000000  08000550  08000550  00001558  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000550  08000558  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000554  08000554  00001554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000558  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000558  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b9b  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000275  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dcb8  00000000  00000000  000024b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d95  00000000  00000000  00010169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb07  00000000  00000000  00010efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060a05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000198  00000000  00000000  00060a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00060be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000538 	.word	0x08000538

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000538 	.word	0x08000538

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <init_tim2>:
 *      Author: aordu
 */
#include "init.h"

void init_tim2(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <init_tim2+0x54>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a12      	ldr	r2, [pc, #72]	@ (80002b8 <init_tim2+0x54>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->PSC = 80000-1;
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <init_tim2+0x58>)
 800027a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000284:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->DIER |= TIM_DIER_UIE;
 8000286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);
 80002a6:	201c      	movs	r0, #28
 80002a8:	f7ff ff94 	bl	80001d4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,2);
 80002ac:	2102      	movs	r1, #2
 80002ae:	201c      	movs	r0, #28
 80002b0:	f7ff ffae 	bl	8000210 <__NVIC_SetPriority>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40023800 	.word	0x40023800
 80002bc:	0001387f 	.word	0x0001387f

080002c0 <init_clk>:

void init_clk(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 80002c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000384 <init_clk+0xc4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000384 <init_clk+0xc4>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 80002d0:	bf00      	nop
 80002d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000384 <init_clk+0xc4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f003 0302 	and.w	r3, r3, #2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <init_clk+0x12>

	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 80002de:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <init_clk+0xc8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <init_clk+0xc8>)
 80002e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e8:	6013      	str	r3, [r2, #0]

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80002ea:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <init_clk+0xc8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a26      	ldr	r2, [pc, #152]	@ (8000388 <init_clk+0xc8>)
 80002f0:	f023 0307 	bic.w	r3, r3, #7
 80002f4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80002f6:	4b24      	ldr	r3, [pc, #144]	@ (8000388 <init_clk+0xc8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a23      	ldr	r2, [pc, #140]	@ (8000388 <init_clk+0xc8>)
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000302:	4b20      	ldr	r3, [pc, #128]	@ (8000384 <init_clk+0xc4>)
 8000304:	4a1f      	ldr	r2, [pc, #124]	@ (8000384 <init_clk+0xc4>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	6093      	str	r3, [r2, #8]

	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800030a:	4b1e      	ldr	r3, [pc, #120]	@ (8000384 <init_clk+0xc4>)
 800030c:	4a1d      	ldr	r2, [pc, #116]	@ (8000384 <init_clk+0xc4>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	6093      	str	r3, [r2, #8]

	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000312:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <init_clk+0xc4>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <init_clk+0xc4>)
 8000318:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800031c:	6093      	str	r3, [r2, #8]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800031e:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <init_clk+0xc4>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	4a18      	ldr	r2, [pc, #96]	@ (8000384 <init_clk+0xc4>)
 8000324:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000328:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_5;
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <init_clk+0xc4>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	4a15      	ldr	r2, [pc, #84]	@ (8000384 <init_clk+0xc4>)
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <init_clk+0xc4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <init_clk+0xc4>)
 800033c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000340:	6013      	str	r3, [r2, #0]

	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 8000342:	bf00      	nop
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <init_clk+0xc4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <init_clk+0x84>

	RCC->CFGR &= ~RCC_CFGR_SW;
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <init_clk+0xc4>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a0b      	ldr	r2, [pc, #44]	@ (8000384 <init_clk+0xc4>)
 8000356:	f023 0303 	bic.w	r3, r3, #3
 800035a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <init_clk+0xc4>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <init_clk+0xc4>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6093      	str	r3, [r2, #8]

	while((RCC->CFGR &RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {};
 8000368:	bf00      	nop
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <init_clk+0xc4>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	f003 030c 	and.w	r3, r3, #12
 8000372:	2b08      	cmp	r3, #8
 8000374:	d1f9      	bne.n	800036a <init_clk+0xaa>
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40023800 	.word	0x40023800
 8000388:	40023c00 	.word	0x40023c00

0800038c <init_led>:

void init_led(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |=	RCC_AHB1ENR_GPIOCEN; 			// Clock enable
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <init_led+0x30>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <init_led+0x30>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOC->MODER |= GPIO_MODER_MODER13_0;			// Mode register, 01 - Output
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <init_led+0x34>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <init_led+0x34>)
 80003a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80003a6:	6013      	str	r3, [r2, #0]

	LED_ON();
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <init_led+0x34>)
 80003aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ae:	619a      	str	r2, [r3, #24]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020800 	.word	0x40020800

080003c4 <TIM2_IRQHandler>:
	NVIC_EnableIRQ(EXTI0_IRQn);
	NVIC_SetPriority(EXTI0_IRQn, 1);
}

void TIM2_IRQHandler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	static int k = 0;

	TIM2->SR &= ~TIM_SR_UIF;
 80003c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d2:	f023 0301 	bic.w	r3, r3, #1
 80003d6:	6113      	str	r3, [r2, #16]
	LED_SWAP();
 80003d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <TIM2_IRQHandler+0x8c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000450 <TIM2_IRQHandler+0x8c>)
 80003de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80003e2:	6153      	str	r3, [r2, #20]

	/*Led Switch*/
	switch (k)
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <TIM2_IRQHandler+0x90>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d82c      	bhi.n	8000446 <TIM2_IRQHandler+0x82>
 80003ec:	a201      	add	r2, pc, #4	@ (adr r2, 80003f4 <TIM2_IRQHandler+0x30>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000405 	.word	0x08000405
 80003f8:	08000415 	.word	0x08000415
 80003fc:	08000425 	.word	0x08000425
 8000400:	08000435 	.word	0x08000435
	{
	case 0:
		TIM2->ARR = SHORT_DELAY;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000408:	2264      	movs	r2, #100	@ 0x64
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c
		k = 1;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <TIM2_IRQHandler+0x90>)
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]
		break;
 8000412:	e018      	b.n	8000446 <TIM2_IRQHandler+0x82>
	case 1:
		TIM2->ARR = SHORT_DELAY;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	2264      	movs	r2, #100	@ 0x64
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
		k = 2;
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <TIM2_IRQHandler+0x90>)
 800041e:	2202      	movs	r2, #2
 8000420:	601a      	str	r2, [r3, #0]
		break;
 8000422:	e010      	b.n	8000446 <TIM2_IRQHandler+0x82>
	case 2:
		TIM2->ARR = SHORT_DELAY;
 8000424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000428:	2264      	movs	r2, #100	@ 0x64
 800042a:	62da      	str	r2, [r3, #44]	@ 0x2c
		k = 3;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <TIM2_IRQHandler+0x90>)
 800042e:	2203      	movs	r2, #3
 8000430:	601a      	str	r2, [r3, #0]
		break;
 8000432:	e008      	b.n	8000446 <TIM2_IRQHandler+0x82>
	case 3:
		TIM2->ARR = LONG_DELAY;
 8000434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000438:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800043c:	62da      	str	r2, [r3, #44]	@ 0x2c
		k = 0;
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <TIM2_IRQHandler+0x90>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
		break;
 8000444:	bf00      	nop
	}
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40020800 	.word	0x40020800
 8000454:	2000001c 	.word	0x2000001c

08000458 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	EXTI->PR |=EXTI_PR_PR0;
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <EXTI0_IRQHandler+0x28>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a07      	ldr	r2, [pc, #28]	@ (8000480 <EXTI0_IRQHandler+0x28>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6153      	str	r3, [r2, #20]
	LED_SWAP();
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <EXTI0_IRQHandler+0x2c>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <EXTI0_IRQHandler+0x2c>)
 800046e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000472:	6153      	str	r3, [r2, #20]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40013c00 	.word	0x40013c00
 8000484:	40020800 	.word	0x40020800

08000488 <main>:
#include <stdbool.h>
#include "main.h"
#include "init.h"

int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	init_clk();
 800048c:	f7ff ff18 	bl	80002c0 <init_clk>
	init_led();
 8000490:	f7ff ff7c 	bl	800038c <init_led>
	init_tim2();
 8000494:	f7ff fee6 	bl	8000264 <init_tim2>

	while (true)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <main+0x10>

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	@ (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	@ (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	@ (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	@ (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 f811 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff ffdb 	bl	8000488 <main>

080004d2 <LoopForever>:

LoopForever:
  b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e0:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 80004e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e8:	20000020 	.word	0x20000020

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000528 <__libc_init_array+0x38>)
 80004f4:	4c0d      	ldr	r4, [pc, #52]	@ (800052c <__libc_init_array+0x3c>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	2600      	movs	r6, #0
 80004fc:	42a6      	cmp	r6, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	4d0b      	ldr	r5, [pc, #44]	@ (8000530 <__libc_init_array+0x40>)
 8000502:	4c0c      	ldr	r4, [pc, #48]	@ (8000534 <__libc_init_array+0x44>)
 8000504:	f000 f818 	bl	8000538 <_init>
 8000508:	1b64      	subs	r4, r4, r5
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	2600      	movs	r6, #0
 800050e:	42a6      	cmp	r6, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f855 3b04 	ldr.w	r3, [r5], #4
 8000518:	4798      	blx	r3
 800051a:	3601      	adds	r6, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000522:	4798      	blx	r3
 8000524:	3601      	adds	r6, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000550 	.word	0x08000550
 800052c:	08000550 	.word	0x08000550
 8000530:	08000550 	.word	0x08000550
 8000534:	08000554 	.word	0x08000554

08000538 <_init>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr

08000544 <_fini>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr
